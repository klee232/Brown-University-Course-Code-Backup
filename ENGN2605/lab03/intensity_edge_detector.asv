function edge_img = intensity_edge_detector(image,threshold)
threshold = double(threshold);
% Preprocessing Portion
% Convert Image to Grayscale
gray_image = rgb2gray(image);
% Convert Image to Double Type
gray_image = double(gray_image);

% Edge Detection Portion
% Load Image and Smooth it with s Gaussian Filter (Smooth Noise)
gauss_image = imgaussfilt(gray_image,2);
% Compute the Gradient of the Image
[dy,dx] = gradient(gauss_image);
% Create Magnitude Map M
M = sqrt(dx.^2+dy.^2);
% Used the Command quiver(dy,dx) to View the Actual Gradient Vectors
quiver(dy,dx);

% Conduct Non Max Suppression
% Looping through Each Pixel of Magnitude Map
% Retrieve the Sizes of Magnitude Map
length_M = size(M,1);
width_M = size(M,2);
% Create Outcome Storage Variable
max_sup_M = zeros(length_M,width_M);
for i_len=1:length_M
    for i_wid=1:width_M
        % Obtain its angle based on dy dx values
        angle = atan2d(dy(i_len,i_wid),dx(i_len,i_wid));
        
        % For cases of angle that is larger than -22.5 and smaller than 22.5 
        % or larger than 157.5 and smaller than -157.5
        if (angle>-22.5 && angle<22.5) || (angle>157.5 && angle<-157.5)
            i_len_pre = i_len;
            i_wid_pre = i_wid-1;
            i_len_nex = i_len;
            i_wid_nex = i_wid+1;
            % Check if the previous or next pixel falls out of the range
            % If previous falls out of the range, just perform the comparison
            % for next pixel
            if i_wid_pre < 1
               curr_pix_grad = M(i_len,i_wid);
               nex_pix_grad = M(i_len_nex,i_wid_nex);
               % If the gradient of the current pixel is smaller than the next pixel,
               % set it to 0
               if curr_pix_grad < nex_pix_grad
                   max_sup_M(i_len,i_wid) = 0;
               else
                   max_sup_M(i_len,i_wid) = curr_pix_grad;
               end
            % If next pixel falls out of the range, just perform the
            % comparison for the previous pixel
            elseif i_wid_nex > width_M
                curr_pix_grad = M(i_len,i_wid);
                pre_pix_grad = M(i_len_pre,i_wid_pre);
                % If the gradient of the current pixel is smaller than the
                % next pixel, set it to 0
                if curr_pix_grad < pre_pix_grad
                    max_sup_M(i_len,i_wid) = 0;
                else
                    max_sup_M(i_len,i_wid) = curr_pix_grad;
                end
            % If all the pixels are in the range, perform comparison on all
            % previous, current and next pixel
            else
                nex_pix_grad = M(i_len_nex,i_wid_nex);
                curr_pix_grad = M(i_len,i_wid);
                pre_pix_grad = M(i_len_pre,i_wid_pre);
                % If the current pixel is not the maximum of all three, set
                % it to 0
                if curr_pix_grad < nex_pix_grad || curr_pix_grad < pre_pix_grad
                    max_sup_M(i_len,i_wid) = 0;
                else
                    max_sup_M(i_len,i_wid) = curr_pix_grad;
                end
            end
            
         % For cases of angle that is larger than 22.5 but smaller than
         % 67.5 or larger than -157.5 but smaller than -112.5
         elseif (angle>=22.5 && angle<67.5) || (angle>=-157.5 && angle<-112.5)
             i_len_pre = i_len-1;
             i_wid_pre = i_wid-1;
             i_len_nex = i_len+1;
             i_wid_nex = i_wid+1;
             % Check if the previous or next pixel falls out of the range
             % If previous pixel falls out of the range, just perform the comparison
             % for next pixel
             if i_len_pre < 1 || i_wid_pre < 1
                 curr_pix_grad = M(i_len,i_wid);
                 nex_pix_grad = M(i_len_nex,i_wid_nex);
                 % If the current pixel is smaller than the next pixel, set
                 % it to 0
                 if curr_pix_grad < nex_pix_grad
                     max_sup_M(i_len,i_wid) = 0;
                 else
                     max_sup_M(i_len,i_wid) = curr_pix_grad;
                 end
             % If next pixel falls out of the range, just perform the comparison
             % for previous pixel
             elseif i_len_nex > length_M || i_wid_nex > width_M
                curr_pix_grad = M(i_len,i_wid);
                pre_pix_grad = M(i_len_pre,i_wid_pre);
                % If the current pixel is smaller than the previous pixel,
                % set it to 0
                if curr_pix_grad < pre_pix_grad
                    max_sup_M(i_len,i_wid) = 0;
                else
                    max_sup_M(i_len,i_wid) = curr_pix_grad;
                end
             % If all the pixels are in the range, perform comparison on all
             % previous, current and next pixel
             else
                 nex_pix_grad = M(i_len_nex,i_wid_nex);
                 curr_pix_grad = M(i_len,i_wid);
                 pre_pix_grad = M(i_len_pre,i_wid_pre);
                 % If the current pixel is smaller than the previous or next pixel,
                 % set it to 0        
                 if curr_pix_grad < pre_pix_grad || curr_pix_grad < nex_pix_grad
                     max_sup_M(i_len,i_wid) = 0;
                 else
                     max_sup_M(i_len,i_wid) = curr_pix_grad;
                 end
             end
             
         % For cases of angle that is larger than 67.5 but smaller than
         % 112.5 or smaller than -67.5 but larger than -112.5
         elseif (angle >= 67.5 && angle < 112.5) || (angle >= -112.5 && angle > -67.5)
             i_len_pre = i_len-1;
             i_wid_pre = i_wid;
             i_len_nex = i_len+1;
             i_wid_nex = i_wid;
             % Check if the previous or next pixel falls out of the range
             % If previous pixel falls out of the range, just perform the comparison
             % for next pixel
             if i_len_pre < 1
                curr_pix_grad = M(i_len,i_wid);
                nex_pix_grad = M(i_len_nex,i_wid_nex);
                % If the current pixel is smaller than the next pixel, set
                % it to 0
                if curr_pix_grad < nex_pix_grad
                   max_sup_M(i_len,i_wid) = 0;
                else
                   max_sup_M(i_len,i_wid) = curr_pix_grad;
                end
             % If next pixel falls out of the range, just perform the comparison
             % for previous pixel
             elseif i_len_nex > length_M
                 curr_pix_grad = M(i_len,i_wid);
                 pre_pix_grad = M(i_len_pre,i_wid_pre);
                 % If the current pixel is smaller than the previous pixel, set
                 % it to 0 
                 if curr_pix_grad < pre_pix_grad
                    max_sup_M(i_len,i_wid) = 0;
                 else
                    max_sup_M(i_len,i_wid) = curr_pix_grad;
                 end
             % If all the pixels are in the range, perform comparison on all
             % previous, current and next pixel
             else
                 nex_pix_grad = M(i_len_nex,i_wid_nex);
                 curr_pix_grad = M(i_len,i_wid);
                 pre_pix_grad = M(i_len_pre,i_wid_pre);
                 % If the current pixel is smaller than the previous or next pixel,
                 % set it to 0 
                 if curr_pix_grad < pre_pix_grad || curr_pix_grad < nex_pix_grad
                    max_sup_M(i_len,i_wid) = 0;
                 else
                    max_sup_M(i_len,i_wid) = curr_pix_grad;
                 end
             end
             
         % For cases of angle that is larger than 112.5 but smaller than
         % 157.5 or larger than -67.5 but larger than -22.5
        else
            i_len_pre = i_len-1;
            i_wid_pre = i_wid+1;
            i_len_nex = i_len+1;
            i_wid_nex = i_wid-1;
            % Check if the previous or next pixel falls out of the range
            % If previous pixel falls out of the range, just perform the comparison
            % for next pixel
            if i_len_pre < 1 || i_wid_pre > width_M
                curr_pix_grad = M(i_len,i_wid);
                nex_pix_grad = M(i_len_nex,i_wid_nex);
                % If the current pixel is smaller than the next pixel, set
                % it to 0
                if curr_pix_grad < nex_pix_grad
                    max_sup_M(i_len,i_wid) = 0;
                else
                    max_sup_M(i_len,i_wid) = curr_pix_grad;
                end
             % If next pixel falls out of the range, just perform the comparison
             % for previous pixel
             elseif i_len_nex > length_M || i_wid_nex < 1
                 curr_pix_grad = M(i_len,i_wid);
                 pre_pix_grad = M(i_len_pre,i_wid_pre);
                % If the current pixel is smaller than the next pixel, set
                % it to 0
                if curr_pix_grad < pre_pix_grad
                    max_sup_M(i_len,i_wid) = 0;
                else
                    max_sup_M(i_len,i_wid) = curr_pix_grad;
                end
             % If all the pixels are in the range, perform comparison on all
             % previous, current and next pixel
             else
                 nex_pix_grad = M(i_len_nex,i_wid_nex);
                 curr_pix_grad = M(i_len,i_wid);
                 pre_pix_grad = M(i_len_pre,i_wid_pre);
                 % If the current pixel is smaller than the previous or next pixel,
                 % set it to 0 
                 if curr_pix_grad < pre_pix_grad || curr_pix_grad < nex_pix_grad
                    max_sup_M(i_len,i_wid) = 0;
                 else
                    max_sup_M(i_len,i_wid) = curr_pix_grad;
                 end
            end
        end
    end
end

% Binarization
edge_img = zeros(length_M,width_M);
for i_len_edg=1:length_M
    for i_wid_edg=1:width_M
        % If the non max suppression value is below threshold, set it to zero, otherwise, set
        % it to 255
        if max_sup_M(i_len,i_wid) < threshold
           edge_img(i_len_edg,i
        
    end
end

edge_img = [dy, dx];


end